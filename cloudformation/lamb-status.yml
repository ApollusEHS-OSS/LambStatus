---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS resources for serverless status pages"
Parameters:
  ServiceName:
    Description: Your service name
    Type: "String"
    Default: "MyService"
  Version:
    Description: The version of LambStatus
    Type: "String"
    Default: "0.0.1"
Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  LambdaRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "LambdaRole"
  LambStatusIAMPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambStatus"
      PolicyDocument:
        Statement:
          - Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: "Allow"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource: !Sub |-
              arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceComponentTable}
          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource: !Sub |-
              arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IncidentTable}
          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource: !Sub |-
              arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IncidentUpdateTable}
      Roles:
        - Ref: "LambdaRole"
  GetComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/GetComponents.zip
      Description: "Get a list of components"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/components
  PostComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/PostComponents.zip
      Description: "Create a new component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PostComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/components
  PatchComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/PatchComponents.zip
      Description: "Update an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/components/{componentid}
  DeleteComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/DeleteComponents.zip
      Description: "Delete an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  DeleteComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/components/{componentid}
  GetIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/GetIncidents.zip
      Description: "Get a list of incidents"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/incidents
  PostIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/PostIncidents.zip
      Description: "Create a new incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PostIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/incidents
  PatchIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/PatchIncidents.zip
      Description: "Update an existing incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/incidents/{incidentid}
  DeleteIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/DeleteIncidents.zip
      Description: "Delete an incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  DeleteIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/incidents/{incidentid}
  GetIncidentUpdatesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/GetIncidentUpdates.zip
      Description: "Get incident updates"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetIncidentUpdates
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetIncidentUpdatesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetIncidentUpdatesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/incidents/{incidentid}/incidentupdates
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: "RestApi"
      Description: "Production deployment"
      StageName: "prod"
    DependsOn:
      - "RestApi"
      - "ComponentsApiResource"
      - "GetComponentsApiMethod"
      - "OptionsComponentsApiMethod"
      - "PostComponentsApiMethod"
      - "ComponentApiResource"
      - "PatchComponentApiMethod"
      - "DeleteComponentApiMethod"
      - "OptionsComponentApiMethod"
      - "IncidentsApiResource"
      - "GetIncidentsApiMethod"
      - "OptionsIncidentsApiMethod"
      - "PostIncidentsApiMethod"
      - "IncidentApiResource"
      - "PatchIncidentApiMethod"
      - "DeleteIncidentApiMethod"
      - "OptionsIncidentApiMethod"
      - "IncidentUpdatesApiResource"
      - "GetIncidentUpdatesApiMethod"
      - "OptionsIncidentUpdatesApiMethod"
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "API for page status"
      Name:
        Ref: "AWS::StackName"
  ApiKey:
    Type: "AWS::ApiGateway::ApiKey"
    Properties:
      Description: "API Key for Status Page"
      Enabled: "true"
      Name:
        Ref: "AWS::StackName"
      StageKeys:
        - RestApiId:
            Ref: "RestApi"
          StageName: "prod"
    DependsOn:
      - "RestApi"
      - "ApiDeployment"
  ComponentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "components"
  ComponentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "ComponentsApiResource"
      PathPart: "{componentid}"
  GetComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  PatchComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  IncidentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "incidents"
  GetIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  IncidentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentsApiResource"
      PathPart: "{incidentid}"
  PatchIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  IncidentUpdatesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentApiResource"
      PathPart: "incidentupdates"
  GetIncidentUpdatesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentUpdatesApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentUpdatesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsIncidentUpdatesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentUpdatesApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  StatusPageS3:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: "index.html"
  StatusPageS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "StatusPageS3"
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
            Principal: "*"
            Resource: !Sub |-
              arn:aws:s3:::${StatusPageS3}/*
  StatusPageDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub |-
              ${StatusPageS3}.s3-website-${AWS::Region}.amazonaws.com
            Id:
              Ref: "StatusPageS3"
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Enabled: "true"
        Comment: "Distribution for status page of LambStatus"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          DefaultTTL: 0
          TargetOriginId:
            Ref: "StatusPageS3"
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
        PriceClass: "PriceClass_200"
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  AdminPageS3:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: "index.html"
  AdminPageS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "AdminPageS3"
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
            Principal: "*"
            Resource: !Sub |-
              arn:aws:s3:::${AdminPageS3}/*
  AdminPageDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub |-
              ${AdminPageS3}.s3-website-${AWS::Region}.amazonaws.com
            Id:
              Ref: "AdminPageS3"
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Enabled: "true"
        Comment: "Distribution for admin page of LambStatus"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          DefaultTTL: 0
          TargetOriginId:
            Ref: "AdminPageS3"
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
        PriceClass: "PriceClass_200"
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  ServiceComponentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-ServiceComponentTable
      AttributeDefinitions:
        - AttributeName: "componentID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "componentID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  IncidentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-IncidentTable
      AttributeDefinitions:
        - AttributeName: "incidentID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "incidentID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  IncidentUpdateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-IncidentUpdateTable
      AttributeDefinitions:
        - AttributeName: "incidentID"
          AttributeType: "S"
        - AttributeName: "incidentUpdateID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "incidentID"
          KeyType: "HASH"
        - AttributeName: "incidentUpdateID"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  S3HandleFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: WriteS3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource: arn:aws:s3:::*
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: ApiGateway
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: arn:aws:apigateway:*:*:*
  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/S3PutObject.zip
      Description: Put an object into S3.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-S3PutObject
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - S3HandleFunctionRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
    DependsOn:
      - S3HandleFunctionRole
  S3SyncObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub |-
          fn/${Version}/S3SyncObjects.zip
      Description: Sync S3 objects.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-S3SyncObjects
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - S3HandleFunctionRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
    DependsOn:
      - S3HandleFunctionRole
  StatusPageApiInfo:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3PutObjectFunction
          - Arn
      Bucket:
        Ref: StatusPageS3
      Key: settings.json
      Body: !Sub |-
        {"ApiKeyID": "${ApiKey}", "InvocationURL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/", "Region": "${AWS::Region}", "ServiceName": "${ServiceName}"}
  AdminPageApiInfo:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3PutObjectFunction
          - Arn
      Bucket:
        Ref: AdminPageS3
      Key: settings.json
      Body: !Sub |-
        {"ApiKeyID": "${ApiKey}", "InvocationURL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/", "Region": "${AWS::Region}", "ServiceName": "${ServiceName}"}
  StatusPageFrontend:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3SyncObjectsFunction
          - Arn
      SourceBucket: lambstatus
      SourceKey: !Sub |-
        status-page/${Version}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket:
        Ref: StatusPageS3
  AdminPageFrontend:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3SyncObjectsFunction
          - Arn
      SourceBucket: lambstatus
      SourceKey: !Sub |-
        admin-page/${Version}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket:
        Ref: AdminPageS3
Outputs:
  LambdaRoleArn:
    Value:
      Fn::GetAtt:
        - "LambdaRole"
        - "Arn"
    Description: "ARN for LambdaRole"
  LambdaCustomResourceRoleArn:
    Value:
      Fn::GetAtt:
        - S3HandleFunctionRole
        - Arn
    Description: ARN for LambdaCustomResourceRole
  AdminPageS3BucketURL:
    Value:
      Fn::GetAtt:
        - "AdminPageS3"
        - "WebsiteURL"
    Description: "URL of S3 bucket for hosting admin page"
  AdminPageS3BucketName:
    Value:
      Ref: "AdminPageS3"
  AdminPageCloudFrontURL:
    Value:
      Fn::GetAtt:
        - "AdminPageDistribution"
        - "DomainName"
  StatusPageS3BucketURL:
    Value:
      Fn::GetAtt:
        - "StatusPageS3"
        - "WebsiteURL"
    Description: "URL of S3 bucket for hosting status page"
  StatusPageS3BucketName:
    Value:
      Ref: "StatusPageS3"
  StatusPageCloudFrontURL:
    Value:
      Fn::GetAtt:
        - "StatusPageDistribution"
        - "DomainName"
  ApiKeyID:
    Value:
      Ref: "ApiKey"
  InvocationURL:
    Value: !Sub |-
      https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
